plugins {
    id 'application'
}

compileJava {
    targetCompatibility = JavaVersion.VERSION_17
    sourceCompatibility = JavaVersion.VERSION_17
}

configurations {
    implementation {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    runtimeOnly {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
}

description = 'RADAR Schemas specification and validation tools.'

dependencies {
    implementation("org.radarbase:radar-jersey:$radarJerseyVersion")
    implementation project(':radar-schemas-core')
    implementation group: 'net.sourceforge.argparse4j', name: 'argparse4j', version: argparseVersion

    def log4j2Version = "2.18.0"
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version")
    runtimeOnly("org.apache.logging.log4j:log4j-api:$log4j2Version")
    runtimeOnly("org.apache.logging.log4j:log4j-jul:$log4j2Version")

    testImplementation group: 'junit', name: 'junit', version: junitVersion

    testImplementation group: 'com.squareup.okhttp3', name: 'okhttp', version: okHttpVersion
}

application {
    mainClass.set('org.radarbase.schema.service.SourceCatalogueServer')
}

if (!project.hasProperty("profile") || project.property("profile") != "docker") {
    apply from: "$rootDir/gradle/testing.gradle"
}

task copyDependencies(type: Copy) {
    from(configurations.named("runtimeClasspath").map {it.files })
    into("$buildDir/third-party/")
    doLast {
        println("Copied third-party runtime dependencies")
    }
}

//---------------------------------------------------------------------------//
// Publishing                                                                //
//---------------------------------------------------------------------------//

tasks.withType(Tar) {
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}
